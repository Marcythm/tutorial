#import "mod.typ": *

#show: book.page.with(title: "脚本：类型、控制流和函数")

= 脚本：类型、控制流和函数

Typst很快，并不是因为它的解析器、解释器有世界领先水平的优化，而是因为在Typst脚本的世界，一切都是纯的，没有几乎。

本节根据Typst的底层原理，带你反推和破魅Typst脚本执行逻辑。

== Typst世界的Hello World

在编程界有一个习俗，无论学什么语言，写的第一个程序都将是在一个奇怪的地方输出Hello world。我们入乡随俗，将这个任务稍加改造：使用Typst制作一个输出为“Hello world!!!”的文档。

显然，我们很容易在「标记模式」下完成这个任务，我们只需要做：

#code(```typ
Hello world!!!
```)

确实挺不错的，没有一点多余之处。

不过还有一个习俗，那么就是我们可以把自己的手脚束缚起来，仅使用脚本模式完成这个任务。

#code(```typ
#"Hello world!!!"
```)

这看起来也很简单。

但是，我们事实上还可以写出更奇形怪状的Hello world程序：

#code(```typ
#let hello-world() = {
  "H"; "e"; "l"; "l"; "o"; " "
  "w"; "o"; "r"; "l"; "d"; "!"; "!"; "!"
}
#hello-world()
```)

虽然都输出了相同的结果，在真正编写文档的时候，我们也仅需要遵循第一种方法：在标记模式下在文档中写下`Hello world!!!`。但是，后两者却更有启发意义，理解它们将有助于你掌握Typst脚本的本质。

== 基本值类型

我们来一个一个解决“Hello World”小节中产生的问题，现在我们来了解第二个。

```typ
#"Hello world!!!"
```

为了知道这段脚本做了什么事情，我们需要首先了解Typst中已有的基本值类型。

如果你学过Python等语言，那么这将对你来说不是问题。在Typst中，基本值类型并不多，它们是：

+ 「布尔类型」（`bool`）
  #code(```typ
  两个值 #false 和 #true 偷偷混入了我们内容之中。
  ```)

+ 「整数类型」（int）
  #code(```typ
  三个值 #(-1)、#(0) 和 #(1) 偷偷混入了我们内容之中。
  ```)

+ 「浮点类型」（float）
  #code(```typ
  四个值 #(0.001)、#(.1) 和 #(2.) 和 #(1e2) 偷偷混入了我们内容之中。
  ```)

+ 「字符串类型」（str）

  #code(```typ
  一个值 #"Hello world!!!" 偷偷混入了我们内容之中。
  ```)

其中，最简单、最容易为大家理解的「值类型」之一应当是「浮点类型」。接下来，让我们具体来看这个示例。

#code(```typ
一个值#0.001偷偷混入了我们内容之中。
```)

这似乎很简单，让我们再看另一个程序，它输出相同的结果：

#code(```typ
一个值#1e-3偷偷混入了我们内容之中。

一个值#(-2+2+0.001)偷偷混入了我们内容之中。
```)

如果你不理解`1e-3`代表什么含义，这并不是重点，你只需要知道`1e-3`是`0.001`的另一种写法，准确来说`1e-3`是`0.001`的科学表示法。

重点是，我们可以根据文档的输出*反推*出：当Typst处于标记模式下，并看到我们提供的一个「值」的时候，它没有尊重我们的写法，而是执行计算，得到结果的值，并将「值」转换成了「内容」再根据内容生成文档。

== 回顾第二个Hello World程序

略

== 数组

略

== 代码块和内容块

略

== 变量和函数

#code(```typ
#let x = "Hello world!!!"
#let y = [一段文本]
#let f(x) = [一个值#(x)偷偷混入了我们内容之中。]

#x

#y

#f(x)

#f(y)
```)

== 回顾第三个Hello World程序

略

== 字典

略

== 时间类型

+ 「日期类型」（`datetime`）

  #code(```typ
  一个值 #datetime(year: 2023, month: 4, day: 19).display() 偷偷混入了我们内容之中。
  ```)

+ 「时间长度类型」（`duration`）

  #code(```typ
  一个值 #duration(days: 3, hours: 10).seconds()s 偷偷混入了我们内容之中。
  ```)
